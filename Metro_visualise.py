# -*- coding: utf-8 -*-
"""GROUP-5 Project(DV).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Zd3CJlPYAV_4lO28B3qaY1ty3TZw5pl

Group Members
*   1)Dindukurth Sri Sai Naga Prasad -- 20181COM0046
*   2)Gondi Sankara Sai Skanda -- 20181COM0053
*   3)Anoop V V -- 20181COM0015
*   4)Gude Madhav -- 20181COM0055
"""

!pip install bar_chart_race

!pip install  pywaffle

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pywaffle import Waffle 
import bar_chart_race as bcr

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv("/content/drive/MyDrive/Kempegowda METRO STN (1).csv")

"""#Basic data about the dataframe"""

df.head()

df.shape

df.info

"""##statistical information of the dataframe"""

df.describe()

"""#Basic visualisation  of the data

#Line plot
"""

fig = plt.figure(figsize = (10,10))
   ax = fig.gca();
   df.plot(ax = ax);

"""#Histogram plot"""

fig = plt.figure(figsize = (25,25))
   ax = fig.gca();
   df.hist(ax = ax);

"""#Q1)Distribute the population entering into the metro station in a simple way and draw your information on it?"""

date=df['DATE'].head(10).tolist()#date
to=df['Passengers EN'].head(10).tolist()#total number of passengers 
tr=df['Passengers TR'].head(10).tolist()#number of passengers who are travelling
ntr=df['Passengers NTR'].head(10).tolist()#number of passengers who are not travelling

plt.plot(date,to,linestyle='--',marker='D',label="total")
plt.plot(date,tr,linestyle='-.',marker="x",label="travelled")
plt.plot(date,ntr,linestyle=':',marker='s',label="not travelled")
plt.title("passenger count")
plt.xlabel("date")
plt.ylabel("population")
plt.legend()
plt.show()

width=0.25
x=np.arange(len(date))
plt.bar(x-width,to,width=width,label="total")
plt.bar(x,tr,width=width,label="travelled",color='green')
plt.bar(x+width,ntr,width=width,label="not travelled",color='red')
plt.title("passenger count")
plt.xlabel("date")
plt.xticks(ticks=x, labels=date)
plt.ylabel("population")
plt.legend()
plt.show()

"""#As shown above the most of the population entering the population are travelling and also we can draw that around 20-35 percent is not travelling

#Q2)Visualise the data based upon the population from the main station to other stations and draw your inferences ?
"""

sr=df['Srirampura'].head(10).tolist()#number of passengers traveling from kempegowda to srirampura
ku=df['Kuvempu Road'].head(10).tolist()#number of passengers traveling from kempegowda to kuvempu road
ra=df['Rajajinagar'].head(10).tolist()#number of passengers traveling from kempegowda to rajaji nagar
ma=df['Mahalakshmi'].head(10).tolist()#number of passengers traveling from kempegowda to mahalakshmi
ch=df['Chickpete'].head(10).tolist()#number of passengers traveling from kempegowda to chickpete
la=df['Lalbagh'].head(10).tolist()#number of passengers traveling from kempegowda to lalbagh

plt.plot(date, sr, color="purple", lw=1, ls='dotted', marker='o', markersize=2,label="srirampura")
plt.plot(date, ku, color="purple", lw=1, ls='dashed', marker='o', markersize=4,label="kuvempu road")
plt.plot(date, ra, color="purple", lw=1, ls=':', marker='o', markersize=8, markerfacecolor="red",label="rajajinagar")
plt.plot(date, ma, color="purple", lw=1, ls='-', marker='s', markersize=8,markerfacecolor="yellow", markeredgewidth=2, markeredgecolor="blue",label="mahalakshmi")
plt.plot(date, ch, color="green", lw=2, ls='solid', marker='s',label="chickpete")
plt.plot(date, la, color="green", lw=2, ls='dashdot', marker='1',label="lalbagh")
plt.title("passenger count from kempegowda to different stations")
plt.xlabel("date")
plt.ylabel("population")
plt.legend()
plt.show()

Sr=df['Srirampura'].tolist()#number of passengers traveling from kempegowda to srirampura
Ku=df['Kuvempu Road'].tolist()#number of passengers traveling from kempegowda to kuvempu road
Ra=df['Rajajinagar'].tolist()#number of passengers traveling from kempegowda to rajaji nagar
Ma=df['Mahalakshmi'].tolist()#number of passengers traveling from kempegowda to mahalakshmi
Ch=df['Chickpete'].tolist()#number of passengers traveling from kempegowda to chickpete
La=df['Lalbagh'].tolist()#number of passengers traveling from kempegowda to lalbagh 
list=[]
list.append(sum(Sr)/len(Sr))
list.append(sum(Ku)/len(Ku))
list.append(sum(Ra)/len(Ra))
list.append(sum(Ma)/len(Ma))
list.append(sum(Ch)/len(Ch))
list.append(sum(La)/len(La))

explode=[0.2,0,0.2,0,0.2,0]
plt.pie(list, labels=["Srirampura",'Kuvempu road','Rajajinagar','Mahalakshmi','Chickpete','Lalbagh'],shadow=True,explode=explode, startangle=90, autopct="%0.1f%%", wedgeprops={'edgecolor':'black'})
plt.title('Percentage of people travelling from kempegowda')
plt.show()

"""#Chickpete metro train is having a little more population compared to the other

#Q3)Compare the population based on the population of people travelling and not travelling  ?
"""

plt.plot(date, tr, linestyle = "-.",label="Travelled",color="#00ff00")
plt.plot(date, ntr,linestyle=":", label = "Not Travelled",color='#ff0000')
plt.xlabel("date")
plt.ylabel("population")
plt.title("people travelling from kempegowda")
plt.legend()

plt.fill_between(date, tr,ntr, where=(tr > ntr),  interpolate=True, alpha = 0.30)

plt.fill_between(date, tr,ntr, where=(tr <= ntr), interpolate=True, color="#0000ff", alpha = 0.30)
plt.show()

colors = [9, 2, 9, 7, 9, 2, 9, 6, 7, 1]
size=[100,100,100,100,100,100,100,100,100,100]
plt.scatter(tr, ntr,s=size, c=colors, cmap="Reds", edgecolors='black', linewidths=1, alpha=0.75)
cbar = plt.colorbar()
cbar.set_label('Satisfaction')
plt.show()

"""#Q3)Visualise the data based upon the population from the main station based on timings and draw your inferences ?

#Single day
"""

label=df.columns.to_list()
label.pop(0)

da = df.head(1).values
da=da.tolist()
da=da.pop(0)
da.pop(0)
print(da)
for i in range(0, len(da)): 
    da[i] = int(da[i])

data = dict(df.head(1))
fig = plt.figure(
    FigureClass=Waffle,
    rows=10,
    columns=5,edgecolor='red',  # Either rows or columns could be omitted
    values=da,
    labels=label,
    icons='star',
    legend={'loc': 'upper left', 'bbox_to_anchor': (0, 0)}
)
fig.show()

"""#A Week"""

hours=[df['5am-6am'].head(7).tolist(),df['6am-7am'].head(7).tolist(),df['7am-8am'].head(7).tolist(),
       df['8am-9am'].head(7).tolist(),df['9am-10am'].head(7).tolist(),df['10am-11am'].head(7).tolist(),
       df['11am-12pm'].head(7).tolist(),df['12pm-1pm'].head(7).tolist(),df['1pm-2pm'].head(7).tolist(),
       df['2pm-3pm'].head(7).tolist(),df['3pm-4pm'].head(7).tolist(),df['4pm-5pm'].head(7).tolist(),
       df['5pm-6pm'].head(7).tolist(),df['6pm-7pm'].head(7).tolist(),df['7pm-8pm'].head(7).tolist(),
       df['8pm-9pm'].head(7).tolist(),df['9pm-10pm'].head(7).tolist(),df['10pm-11pm'].head(7).tolist()]
date=df['DATE'].head(7).tolist()

hours

fig,ax= plt.subplots(6, 3, sharex='col', sharey='row',figsize=(20,20))
ax[0,0].bar(date, hours[0])
ax[0,0].set_title("5am-6am")
ax[0,1].bar(date, hours[1])
ax[0,1].set_title("6am-7am")
ax[0,2].bar(date, hours[2])
ax[0,2].set_title("7am-8am")
ax[1,0].bar(date, hours[3])
ax[1,0].set_title("8am-9am")
ax[1,1].bar(date, hours[4])
ax[1,1].set_title("9am-10am")
ax[1,2].bar(date, hours[5])
ax[1,2].set_title("10am-11am")
ax[2,0].bar(date, hours[6])
ax[2,0].set_title("11am-12pm")
ax[2,1].bar(date, hours[17])
ax[2,1].set_title("12pm-1pm")
ax[2,2].bar(date, hours[7])
ax[2,2].set_title("1pm-2pm")
ax[3,0].bar(date, hours[8])
ax[3,0].set_title("2pm-3pm")
ax[3,1].bar(date, hours[9]) 
ax[3,1].set_title("3pm-4pm")
ax[3,2].bar(date, hours[10])
ax[3,2].set_title("4pm-5pm")
ax[4,0].bar(date, hours[11])
ax[4,0].set_title("5pm-6pm")
ax[4,1].bar(date, hours[12])
ax[4,1].set_title("6pm-7pm")
ax[4,2].bar(date, hours[13])
ax[4,2].set_title("7pm-8pm")
ax[5,0].bar(date, hours[14])
ax[5,0].set_title("8pm-9pm")
ax[5,1].bar(date, hours[15])
ax[5,1].set_title("9pm-10pm")
ax[5,2].bar(date, hours[16])
ax[5,2].set_title("10pm-11pm")
for ax in ax.flat:
    ax.set(xlabel='date', ylabel='population')
plt.show()

"""##7pm-8pm has the most of the population according to the graphs

#Bar chart race
"""

cols = ['DATE','Srirampura','Kuvempu Road','Rajajinagar','Mahalakshmi','Chickpete','Lalbagh','Passengers EN','Passengers TR','Passengers NTR']
Subsetdf = df[cols]
Subsetdf.set_index("DATE",inplace = True)
cum_sum_df = Subsetdf.cumsum(axis = 0)
cum_sum_df.tail(10)

bcr.bar_chart_race(df=cum_sum_df, filename=None,figsize = (4.5,3),title='Metro')

